<!DOCTYPE html>
<html>
<head>
    <link href="stylesheets/jquery.alerts.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="include/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="include/bootstrap/css/bootstrap-theme.min.css">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="javascripts/jquery.alerts.js"></script>
    <script src="javascripts/tree.js"></script>
    <link href="stylesheets/tree.css" rel="stylesheet" type="text/css">
</head>
<body>
<header>
    <div class="navbar navbar-default navbar-inverse">
        <div class="container">
            <p class="navbar-text navbar-left" style="color:white;margin-right:20px;">Logged in as: <%= user.username %> </p>

            <a href="profile/button" class="btn navbar-btn btn-default" id="button-images-slideshare"><span class="glyphicon glyphicon-picture"></span></a>
            <a href="tree" class="btn navbar-btn btn-default" id="button-family-tree"><span class="glyphicon glyphicon-tree-conifer"></span></a>

            <div class="dropdown btn-group btn-default">
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><span class="glyphicon glyphicon-cog"></span></a>
                <ul class="dropdown-menu">
                    <li><a href="edit_profile">Edit profile</a></li>
                    <li><a href="facebook">Add account</a></li>
                    <li class="divider"></li>
                    <li><a href="http://google.ro">Help</a></li>
                    <li><a href="logout">Log out</a></li>
                </ul>
            </div>
            <a href="refresh" class="btn navbar-btn btn-default" id="button-refresh"><span class=" glyphicon glyphicon-refresh"></span></a>

            <div class="dropdown btn-group btn-default navbar-btn navbar-right">
                <a class="btn dropdown-toggle" data-toggle="dropdown" href="#"><span
                            class="glyphicon glyphicon-chevron-down"></span></a>
                <ul class="dropdown-menu" style="width:180px">
                    <li>
                        <form action="/advanced_search" class="navbar-form navbar-right" role="search">
                            Description : <input type="text" name="description"><br>
                            Commented By : <input type="text" name="commented_by"><br>
                            Comment Content : <input type="text" name="commented_content"><br>
                            Liked By : <input type="text" name="liked_by"><br>
                            Persons Tagged : <input type="text" name="persons_tagged"><br>
                            <button type="submit" id="searchbtn" class="btn btn-default btn_right"><span
                                        class="glyphicon glyphicon-search"></span></button>
                        </form>
                    </li>

                </ul>
            </div>


            <form action="/search_photos_button" class="navbar-form navbar-right" role="search">
                <div class="form-group">
                    <input type="text" name="searched_text" class="form-control" placeholder="Search text">
                </div>
                <button type="submit" id="searchbtn" class="btn btn-default"><span
                            class="glyphicon glyphicon-search"></span></button>
            </form>


        </div>
    </div>
</header>
<br>
<div id="control" style="visibility:hidden; width: 500px;">
</div>

<!--
<div class="left-panel" id="panel">
    <br>
    <input type="text" class="form-control" placeholder="Father">
    <button type="button" class="btn btn-primary">Add Father</button>
    <hr>
    <input type="text" class="form-control" placeholder="Mother">
    <button type="button" class="btn btn-danger">Add Mother</button>
    <hr>
    <input type="text" class="form-control" placeholder="Son">
    <button type="button" class="btn btn-success">Add Son</button>
    <hr>
    <input type="text" class="form-control" placeholder="Daughter">
    <button type="button" class="btn btn-warning">Add Daughter</button>
-->
</div>
<button type="button" id="toggle"> Click</button>

<div id="container">

</div>
<script src="javascripts/sigma.min.js"></script>
<script>
    $(document).ready(function(){
        var s = new sigma('container');

        var clicked_node = undefined;
        var current_node_id = 1;
        var current_edge_id = 0;
        var x_space = 100;
        var y_space = 100;

        var x_start = 100;
        var y_start = 100;

        var x_constant = 10;

        /* Add to graph */
        function sendNode(url, id, fromID, name, type) {
            $.ajax({
                url: url,
                type: 'post',
                data: {
                    node: {
                        id: id,
                        fromID: fromID,
                        name: name,
                        type: type
                    }
                },
                dataType: 'json',
                success: function (data) {
                }
            });
        };

        function sendDeletedNode(url, id) {
            $.ajax({
                url: url,
                type: 'post',
                data: {
                    id: id
                },
                dataType: 'json',
                success: function (data) {
                }
            });
        };

        function addMother(node, name, id){
            var mother_node_id;
            if (id == undefined) {
                mother_node_id = current_node_id.toString();
                current_node_id++;
            }
            else{
                mother_node_id = id;
            }

            x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

            s.graph.addNode({id: mother_node_id, label: name, x: node.x - x_space, y: node.y - y_space, size: 3, color: '#333', gender:'female'});
            s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: mother_node_id});
            current_edge_id++;

            s.refresh();
            sendNode("/ajax", mother_node_id, node.id, name, "mother");
        };

        function addFather(node, name, id){
            var father_node_id;
            if (id == undefined) {
                father_node_id = current_node_id.toString();
                current_node_id++;
            }
            else {
                father_node_id = id;
            }

            x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

            s.graph.addNode({id: father_node_id, label: name, x: node.x + x_space, y: node.y - y_space, size: 3, color: '#333', gender:'male'});

            s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: father_node_id});
            current_edge_id++;

            s.refresh();
            sendNode("/ajax", father_node_id, node.id, name, "father");
        };

        function addChild(node, name, gender, id) {
            var nodeX, nodeY;
            if (node.gender == "male") {
                var leftestNode = getLeftestChildX(node);
                x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

                if (leftestNode == undefined) {
                    nodeX = node.x - x_space;
                    nodeY = node.y + y_space;
                }
                else {
                    nodeX = leftestNode.x - x_space;
                    nodeY = leftestNode.y;
                }
            }
            else if (node.gender == "female") {
                var rightestNode = getRightestChildX(node);
                x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));
                //alert("female" + x_space.toString());

                if (rightestNode == undefined) {
                    nodeX = node.x + x_space;
                    nodeY = node.y + y_space;
                }
                else {
                    nodeX = rightestNode.x + x_space;
                    nodeY = rightestNode.y;
                }
            }
            else {
                alert("BUG!!!");
            }

            var child_node_id;
            if (id == undefined) {
                child_node_id = current_node_id.toString();
                current_node_id++;
            } else {
                child_node_id = id;
            }


            //var husbandOfWife = getHusbandOrWife(node);

            s.graph.addNode({id: child_node_id, label: name, x: nodeX, y: nodeY, size: 3, color: '#333', gender: gender});

//            if (husbandOfWife != undefined) {
//                s.graph.addEdge({id: current_edge_id.toString(), source: child_node_id, target: husbandOfWife.id});
//                current_edge_id++;
//            }

            s.graph.addEdge({id: current_edge_id.toString(), source: child_node_id, target: node.id});
            current_edge_id++;

            s.refresh();
            var type;
            if (node.gender == "male") {
                type = "father";
            }
            else {
                type = "mother";
            }
            sendNode("/ajax", child_node_id, node.id, name, type);
        };

        /* Get from graph */
        function getMother(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {

                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y && source_node.x > target_node.x && source_node.y > target_node.y) {
                    return target_node;
                }
            }
            return undefined;
        };

        function getFather(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {

                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y && source_node.x < target_node.x && source_node.y > target_node.y) {
                    return target_node;
                }
            }
            return undefined;
        };

        function getHusbandOrWife(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y) {
                    if (node.gender == 'male') {
                        return getMother(source_node);
                    }
                    return getFather(source_node);
                }
            }
            return undefined;
        };

        function getLeftestChildX(node) {
            var leftestX = 100000;
            var leftestNode = undefined;
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == target_node.x && node.y == target_node.y && target_node.x > source_node.x && source_node.x < leftestX) {
                    leftestX = source_node.x;
                    leftestNode = source_node;
                }
            }

            if (leftestNode != undefined) {
                //console.log("LC: X: " + leftestNode.x.toString() + " Y: " + leftestNode.y.toString());
            }

            return leftestNode;
        };

        function getRightestChildX(node) {
            var rightestX = -100000;
            var rightestNode = undefined;
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == target_node.x && node.y == target_node.y && target_node.x < source_node.x && source_node.x > rightestX) {
                    //alert(source_node.label);
                    rightestX = source_node.x;
                    rightestNode = source_node;
                }
            }

            //alert(rightestX);

            return rightestNode;
        };

        function canBeRemoved(node) {
            if (s.graph.degree(node.id) <= 1 && node.id != '0') {
                return true;
            }
            return false;
        };

        function removeNode(node) {
            if (canBeRemoved(node)) {
                s.graph.dropNode(node.id);
            }
            s.refresh();

            sendDeletedNode('/post/delete/node', node.id);
        };

        /* Calls from html */
        function submitMother() {
            if (clicked_node == undefined) return;
            console.log("Submit mother");


            var name = prompt("Please enter your mother's name", "Gigela");
            if (name != null) {
                addMother(clicked_node, name);

                child = document.getElementById("motherSubmit");
                child.parentNode.removeChild(child);
            }
        };

        function submitFather() {
            if (clicked_node == undefined) return;

            console.log("Submit father");

            var name = prompt("Please enter your father's name", "Gigel");
            if (name != null) {
                addFather(clicked_node, name);

                child = document.getElementById("fatherSubmit");
                child.parentNode.removeChild(child);
            }
        };

        function submitChild(gender) {
            if (clicked_node == undefined) return;

            console.log("Submit child");
            var name = prompt("Please enter your child's name", "Gigi");
            if (name != null) {
                addChild(clicked_node, name, gender);
            }
        };

        function getInfo(url, requestID) {
            var responseString = ($.ajax({
                url: url,
                type: 'get',
                data: {
                    myID: requestID
                },
                async: false,
                dataType: 'json'
            })).responseText;
            console.log(responseString);
//            console.dir(JSON.parse(responseString));
            return JSON.parse(responseString);
        };

        function isInGraf(node) {
            if (s.graph.nodes(node.id) == undefined) {
                return false;
            }
            return true;
        };

        function checkEmpty(obj) {
            if (obj == undefined) return true;
            //console.log(Object.keys(obj).length === 0);
            return Object.keys(obj).length === 0;
        };

        function addNodeToTree(node) {
            var parents = getInfo("/get/parents", node.id);
            console.log("SUS");
            if (!checkEmpty(parents.father) && !isInGraf(parents.father)) {
                addFather(node, parents.father.name);
                addNodeToTree(parents.father);
            }

            if (!checkEmpty(parents.mother) && !isInGraf(parents.mother)) {
                addMother(node, parents.mother.name);
                addNodeToTree(parents.mother);
            }

            var children = getInfo("/get/children", node.id);

            if (!checkEmpty(children.boys)) {
                console.log("BOYS");
                for (i = 0; i < children.boys.length; i++) {
                    console.log(i);
                    if (!checkEmpty(children.boys[i]) && !isInGraf(children.boys[i].id)) {
                        addChild(node, children.boys[i].name, children.boys[i].gender);
                        addNodeToTree(children.boys[i]);
                    }
                }
            }

            if (!checkEmpty(children.girl)) {
                console.log("GIRLS");
                for (i = 0; i < children.girl.length; i++) {
                    console.log(i);
                    if (!checkEmpty(children.girl[i]) && !isInGraf(children.girl[i].id)) {
                        addChild(node, children.girl[i].name, children.girl[i].gender);
                        addNodeToTree(children.girl[i]);
                    }
                }
            }
        };

        function createFamilityTree() {
            var node = getInfo("/get/root");
            s.graph.addNode({id: node.id, label: node.name, x: x_start, y: y_start, size: 3, color: '#333', gender: node.gender });
            addNodeToTree(node);
        };

        <!--s.graph.addNode({id: '0', label: '<%= user.username %>', x: x_start, y: y_start, size: 3, color: '#333', gender: 'male'});-->
        <!--sendNode("/ajax", "0", "", "<%= user.username %>", "root");-->

        s.bind('clickNode', function(e) {
            clicked_node = e.data.node;
            clicked_node.color = 'red';
            s.refresh();
            document.getElementById("control").innerHTML = '<p>Selected node:  <span id="selectedNode"></span></p><button id="motherSubmit">Add Mother</button><button id="fatherSubmit">Add Father</button><button id="girlSubmit">Add Girl</button><button id="boySubmit">Add Boy</button><button id="delete">Delete</button>';

            $('#motherSubmit').on('click',function(){
                submitMother();
            });
            $('#fatherSubmit').on('click',function(){
                submitFather();
            });
            $('#girlSubmit').on('click',function(){
                submitChild("female");
            });
            $('#boySubmit').on('click',function(){
                submitChild("male");
            });
            $('#delete').on('click',function(){
                removeNode(clicked_node);
            });

            document.getElementById("selectedNode").innerHTML = clicked_node.label;

            if (getMother(clicked_node) != undefined) {
                child = document.getElementById("motherSubmit");
                child.parentNode.removeChild(child);
            }
            if (getFather(clicked_node) != undefined) {
                child = document.getElementById("fatherSubmit");
                child.parentNode.removeChild(child);
            }
            if (!canBeRemoved(clicked_node)) {
                child = document.getElementById("delete");
                child.parentNode.removeChild(child);
            }

            document.getElementById("control").style.visibility = "visible";
        });

        s.bind('clickStage', function(e) {
            clicked_node.color = "#333";
            s.refresh();
            clicked_node = undefined;
            document.getElementById("control").style.visibility = "hidden";
        });

        s.settings({
            font    : "consolas",
            minNodeSize : 6,
            maxNodeSize : 15,
            labelThreshold : 0,
            labelSize : "proportional",
            nodeHoverColor : "default",
            simpleHover: true,
            labelHoverShadow: "node"
        });

        createFamilityTree();
        s.refresh();
    });
</script>
</body>
</html>