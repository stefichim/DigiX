<!DOCTYPE html>
<html>
<head>
    <link href="stylesheets/arbore.css" rel="stylesheet" type="text/css">
    <link href="stylesheets/jquery.alerts.css" rel="stylesheet" type="text/css">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script src="javascripts/jquery.alerts.js"></script>
</head>
<body>
<div id="control" style="visibility:hidden; width: 500px;">
</div>

<div id="container">

</div>
<script src="javascripts/sigma.min.js"></script>
<script>
    $(document).ready(function(){
        var s = new sigma('container');

        var clicked_node = undefined;
        var current_node_id = 1;
        var current_edge_id = 0;
        var x_space = 100;
        var y_space = 100;

        var x_start = 100;
        var y_start = 100;

        var x_constant = 10;

        /* Add to graph */
        function sendNode(url, myID, fromID, name, type) {
            $.ajax({
                url: url,
                type: 'post',
                data: {
                    node: {
                        myID: myID,
                        fromID: fromID,
                        name: name,
                        type: type
                    }
                },
                dataType: 'json',
                success: function (data) {
                }
            });
        };

        function sendDeletedNode(url, myID) {
            $.ajax({
                url: url,
                type: 'post',
                data: {
                    myID: myID
                },
                dataType: 'json',
                success: function (data) {
                }
            });
        };

        function addMother(node, name){
            var mother_node_id = current_node_id.toString();
            current_node_id++;

            x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

            s.graph.addNode({id: mother_node_id, label: name, x: node.x - x_space, y: node.y - y_space, size: 3, color: '#333', gender:'female'});
            s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: mother_node_id});
            current_edge_id++;

            s.refresh();
            sendNode("/ajax", mother_node_id, node.id, name, "mother");
        };

        function addFather(node, name){
            var father_node_id = current_node_id.toString();
            current_node_id++;

            x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

            s.graph.addNode({id: father_node_id, label: name, x: node.x + x_space, y: node.y - y_space, size: 3, color: '#333', gender:'male'});

            s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: father_node_id});
            current_edge_id++;

            s.refresh();
            sendNode("/ajax", father_node_id, node.id, name, "father");
        };

        function addChild(node, name, gender) {
            var nodeX, nodeY;
            if (node.gender == "male") {
                var leftestNode = getLeftestChildX(node);
                x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));

                if (leftestNode == undefined) {
                    nodeX = node.x - x_space;
                    nodeY = node.y + y_space;
                }
                else {
                    nodeX = leftestNode.x - x_space;
                    nodeY = leftestNode.y;
                }
            }
            else if (node.gender == "female") {
                var rightestNode = getRightestChildX(node);
                x_space = Math.abs(x_start - x_constant * ((y_start - node.y) / y_space));
                //alert("female" + x_space.toString());

                if (rightestNode == undefined) {
                    nodeX = node.x + x_space;
                    nodeY = node.y + y_space;
                }
                else {
                    nodeX = rightestNode.x + x_space;
                    nodeY = rightestNode.y;
                }
            }
            else {
                alert("BUG!!!");
            }

            var child_node_id = current_node_id.toString();
            current_node_id++;

            //var husbandOfWife = getHusbandOrWife(node);

            s.graph.addNode({id: child_node_id, label: name, x: nodeX, y: nodeY, size: 3, color: '#333', gender: gender});

//            if (husbandOfWife != undefined) {
//                s.graph.addEdge({id: current_edge_id.toString(), source: child_node_id, target: husbandOfWife.id});
//                current_edge_id++;
//            }

            s.graph.addEdge({id: current_edge_id.toString(), source: child_node_id, target: node.id});
            current_edge_id++;

            s.refresh();
            var type;
            if (node.gender == "male") {
                type = "father";
            }
            else {
                type = "mother";
            }
            sendNode("/ajax", child_node_id, node.id, name, type);
        };

        /* Get from graph */
        function getMother(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {

                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y && source_node.x > target_node.x && source_node.y > target_node.y) {
                    return target_node;
                }
            }
            return undefined;
        };

        function getFather(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {

                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y && source_node.x < target_node.x && source_node.y > target_node.y) {
                    return target_node;
                }
            }
            return undefined;
        };

        function getHusbandOrWife(node) {
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == source_node.x && node.y == source_node.y) {
                    if (node.gender == 'male') {
                        return getMother(source_node);
                    }
                    return getFather(source_node);
                }
            }
            return undefined;
        };

        function getLeftestChildX(node) {
            var leftestX = 100000;
            var leftestNode = undefined;
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == target_node.x && node.y == target_node.y && target_node.x > source_node.x && source_node.x < leftestX) {
                    leftestX = source_node.x;
                    leftestNode = source_node;
                }
            }

            if (leftestNode != undefined) {
                //console.log("LC: X: " + leftestNode.x.toString() + " Y: " + leftestNode.y.toString());
            }

            return leftestNode;
        };

        function getRightestChildX(node) {
            var rightestX = -100000;
            var rightestNode = undefined;
            var edges = s.graph.edges();
            for (var i = 0; i < edges.length; i++) {
                var source_node = s.graph.nodes(edges[i].source);
                var target_node = s.graph.nodes(edges[i].target);

                if (node.x == target_node.x && node.y == target_node.y && target_node.x < source_node.x && source_node.x > rightestX) {
                    //alert(source_node.label);
                    rightestX = source_node.x;
                    rightestNode = source_node;
                }
            }

            //alert(rightestX);

            return rightestNode;
        };

        function canBeRemoved(node) {
            if (s.graph.degree(node.id) <= 1 && node.id != '0') {
                return true;
            }
            return false;
        };

        function removeNode(node) {
            if (canBeRemoved(node)) {
                s.graph.dropNode(node.id);
            }
            s.refresh();

            sendNode('/post/delete/node', node.id);
        };

        /* Calls from html */
        function submitMother() {
            if (clicked_node == undefined) return;
            console.log("Submit mother");


            var name = prompt("Please enter your mother's name", "Gigela");
            if (name != null) {
                addMother(clicked_node, name);

                child = document.getElementById("motherSubmit");
                child.parentNode.removeChild(child);
            }
        };

        function submitFather() {
            if (clicked_node == undefined) return;

            console.log("Submit father");

            var name = prompt("Please enter your father's name", "Gigel");
            if (name != null) {
                addFather(clicked_node, name);

                child = document.getElementById("fatherSubmit");
                child.parentNode.removeChild(child);
            }
        };

        function submitChild(gender) {
            if (clicked_node == undefined) return;

            console.log("Submit child");
            var name = prompt("Please enter your child's name", "Gigi");
            if (name != null) {
                addChild(clicked_node, name, gender);
            }
        };

        s.graph.addNode({id: '0', label: '<%= user.username %>', x: x_start, y: y_start, size: 3, color: '#333', gender: 'male'});
        sendNode("/ajax", "0", "", "<%= user.username %>", "root");

        s.bind('clickNode', function(e) {
            clicked_node = e.data.node;
            clicked_node.color = 'red';
            s.refresh();
            document.getElementById("control").innerHTML = '<p>Selected node:  <span id="selectedNode"></span></p><button id="motherSubmit">Add Mother</button><button id="fatherSubmit">Add Father</button><button id="girlSubmit">Add Girl</button><button id="boySubmit">Add Boy</button><button id="delete">Delete</button>';

            $('#motherSubmit').on('click',function(){
                submitMother();
            });
            $('#fatherSubmit').on('click',function(){
                submitFather();
            });
            $('#girlSubmit').on('click',function(){
                submitChild("female");
            });
            $('#boySubmit').on('click',function(){
                submitChild("male");
            });
            $('#delete').on('click',function(){
                removeNode(clicked_node);
            });

            document.getElementById("selectedNode").innerHTML = clicked_node.label;

            if (getMother(clicked_node) != undefined) {
                child = document.getElementById("motherSubmit");
                child.parentNode.removeChild(child);
            }
            if (getFather(clicked_node) != undefined) {
                child = document.getElementById("fatherSubmit");
                child.parentNode.removeChild(child);
            }
            if (!canBeRemoved(clicked_node)) {
                child = document.getElementById("delete");
                child.parentNode.removeChild(child);
            }

            document.getElementById("control").style.visibility = "visible";
        });

        s.bind('clickStage', function(e) {
            clicked_node.color = "#333";
            s.refresh();
            clicked_node = undefined;
            document.getElementById("control").style.visibility = "hidden";
        });

        s.settings({
            font    : "consolas",
            minNodeSize : 6,
            maxNodeSize : 15,
            labelThreshold : 0,
            labelSize : "proportional",
            nodeHoverColor : "default",
            simpleHover: true,
            labelHoverShadow: "node"
        });

        s.refresh();
    });
</script>
</body>
</html>