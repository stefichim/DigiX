<!DOCTYPE html>
<html>
<head>
    <link href="stylesheets/arbore.css" rel="stylesheet" type="text/css">
    <script src="javascripts/arbore.js" type="text/javascript"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
</head>
<body>
<div class="control">
    <div class="nume">
        Nume:
        <input type="text" value="">
        <br>
        <input type="button" value="Submit">
    </div>
    <br><hr>
    <div class="parent">
        <form>
            Nume: <input type="text" value="" id="parentText">
            <select id="parentSelect">
                <option value="mother">Mother</option>
                <option value="father">Father</option>
            </select>
            <br>
            <input type="button" value="Submit" onclick="addParent(this.form)">
        </form>
    </div>
    <br><hr>
    <div class="child">
        Nume: <input type="text" value="">
        <br>
        <input type="button" value="Submit" >
    </div>
    <br> <hr>
    <input type="button" value="Submit ALL" onclick="sendData()">
</div>

<div id="container">

</div>
<script src="javascripts/sigma.min.js"></script>
<script>
    var s = new sigma('container');

    var clicked_node = undefined;
    var current_node_id = 1;
    var current_edge_id = 0;
    var x_space = 100;
    var y_space = 100;

    var x_start = 100;
    var y_start = 100;

    var x_constant = 10;

    function addMother(node){
        var mother_node_id = current_node_id.toString();
        current_node_id++;

        x_space = x_start - x_constant * ((y_start - node.y) / y_space);

        s.graph.addNode({id: mother_node_id, label: mother_node_id, x: node.x - x_space, y: node.y - y_space, size: 3, color: '#f00'});
        s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: mother_node_id});
        current_edge_id++;
    };

    function addFather(node){
        var father_node_id = current_node_id.toString();
        current_node_id++;

        x_space = x_start - x_constant * ((y_start - node.y) / y_space);

        s.graph.addNode({id: father_node_id, label: father_node_id, x: node.x + x_space, y: node.y - y_space, size: 3, color: '#f00'});

        s.graph.addEdge({id: current_edge_id.toString(), source: node.id, target: father_node_id});
        current_edge_id++;
    };

    function addParrent() {
        if (clicked_node == undefined) return;
        var select = document.getElementById("parentSelect");
        var name = document.getElementById("parentText").value;
        var selectedOption = select.options[select.selectedIndex].value;

        if (selectedOption == "mother") addMother(clicked_node);
        else if (selectedOption == "father") addFather(clicked_node);
        else alert("Oups");

//        $.ajax({
//            url: '/ajax',
//            type: 'post', // performing a POST request
//            data: {
//                node: tempNode
//            },
//            dataType: 'json',
//            success: function (data) {
//                // etc...
//            }
//        });
    }

    s.graph.addNode({id: '0', label: '0', x: x_start, y: y_start, size: 3, color: '#f00'});

//    for (var i = 0; i < 10; i++){
//        addMother(s.graph.nodes(i.toString()));
//        //addFather(s.graph.nodes(i.toString()));
//    }
//
//    addFather(s.graph.nodes('9'));
//    addFather(s.graph.nodes('5'));

    s.bind('clickNode', function(e) {
        clicked_node = e.data.node;
        document.getElementById("test").style.visibility = "visible";
    });

//    s.bind('outNode', function(e) {
//        document.getElementById("test").style.visibility = "hidden";
//    });


    /*.addEdge({id: 'e0', source: 'n0', target: 'n1'});
    */

    s.settings({
        minNodeSize : 6,
        maxNodeSize : 10,
        labelThreshold : 0,
        labelSize : "proportional"
    });

    s.refresh();
</script>
</body>
</html>